package practice;

import java.util.Stack;

public class QueueUsingStack {

	public static void main(String args[]) 
    { 
        /* Create a queue with items 1 2 3*/
        Queue q = new Queue(); 
        q.enQueue(1); 
        q.enQueue(2); 
        q.enQueue(3); 
  
        /* Dequeue items */
        System.out.println(q.peek() + " ");
        System.out.println(q.size() + " ");
        System.out.println(q.deQueue() + " "); 
        System.out.println(q.size() + " ");
        System.out.println(q.deQueue() + " ");
        System.out.println(q.peek() + " ");
        System.out.println(q.size() + " ");
        System.out.println(q.deQueue() + " ");
        System.out.println(q.peek() + " ");
        System.out.println(q.size() + " ");
    }
	
	static class Queue{
		static Stack<Integer> s1 = new Stack<>();
		static Stack<Integer> s2 = new Stack<>();
		
		static void enQueue(int x) {
			s1.add(x);	
		}
		
		static int deQueue() {
			if(s1.isEmpty())
				return -1;
			while(!s1.isEmpty()) {
				s2.add(s1.pop());
			}
			int result = s2.pop();
			while(!s2.isEmpty()) {
				s1.add(s2.pop());
			}
			return result;
		}
		
		static int peek() {
			if(s1.isEmpty())
				return -1;
			while(!s1.isEmpty()) {
				s2.add(s1.pop());
			}
			int result = s2.peek();
			while(!s2.isEmpty()) {
				s1.add(s2.pop());
			}
			return result;
		}
		
		static int size() {
			return s1.size();
		}
		
	}

}
